$date
  Thu Dec 09 23:17:12 2021
$end
$version
  GHDL v0
$end
$timescale
  1 fs
$end
$scope module standard $end
$upscope $end
$scope module std_logic_1164 $end
$upscope $end
$scope module parallel_mult_tb $end
$var reg 4 ! x[3:0] $end
$var reg 4 " y[3:0] $end
$var reg 8 # z[7:0] $end
$scope module parallel_mult_1 $end
$var reg 4 $ x[3:0] $end
$var reg 4 % y[3:0] $end
$var reg 8 & z[7:0] $end
$var reg 4 ' a[3:0] $end
$var reg 4 ( c1[3:0] $end
$var reg 4 ) s1[3:0] $end
$var reg 4 * c2[3:0] $end
$var reg 4 + s2[3:0] $end
$var reg 4 , c3[3:0] $end
$var reg 4 - s3[3:0] $end
$scope module row_0_0 $end
$var reg 1 . andgate_in_1 $end
$var reg 1 / andgate_in_2 $end
$var reg 1 0 andgate_out $end
$upscope $end
$scope module row_0_1 $end
$var reg 1 1 andgate_in_1 $end
$var reg 1 2 andgate_in_2 $end
$var reg 1 3 andgate_out $end
$upscope $end
$scope module row_0_2 $end
$var reg 1 4 andgate_in_1 $end
$var reg 1 5 andgate_in_2 $end
$var reg 1 6 andgate_out $end
$upscope $end
$scope module row_0_3 $end
$var reg 1 7 andgate_in_1 $end
$var reg 1 8 andgate_in_2 $end
$var reg 1 9 andgate_out $end
$upscope $end
$scope module row_1_0 $end
$var reg 1 : a $end
$var reg 1 ; b $end
$var reg 1 < c $end
$var reg 1 = cout $end
$var reg 1 > sum $end
$var reg 1 ? d $end
$upscope $end
$scope module row_1_1 $end
$var reg 1 @ a $end
$var reg 1 A b $end
$var reg 1 B c $end
$var reg 1 C cin $end
$var reg 1 D cout $end
$var reg 1 E sum $end
$var reg 1 F d $end
$upscope $end
$scope module row_1_2 $end
$var reg 1 G a $end
$var reg 1 H b $end
$var reg 1 I c $end
$var reg 1 J cin $end
$var reg 1 K cout $end
$var reg 1 L sum $end
$var reg 1 M d $end
$upscope $end
$scope module row_1_3 $end
$var reg 1 N a $end
$var reg 1 O b $end
$var reg 1 P c $end
$var reg 1 Q cout $end
$var reg 1 R sum $end
$var reg 1 S d $end
$upscope $end
$scope module row_2_0 $end
$var reg 1 T a $end
$var reg 1 U b $end
$var reg 1 V c $end
$var reg 1 W cout $end
$var reg 1 X sum $end
$var reg 1 Y d $end
$upscope $end
$scope module row_2_1 $end
$var reg 1 Z a $end
$var reg 1 [ b $end
$var reg 1 \ c $end
$var reg 1 ] cin $end
$var reg 1 ^ cout $end
$var reg 1 _ sum $end
$var reg 1 ` d $end
$upscope $end
$scope module row_2_2 $end
$var reg 1 a a $end
$var reg 1 b b $end
$var reg 1 c c $end
$var reg 1 d cin $end
$var reg 1 e cout $end
$var reg 1 f sum $end
$var reg 1 g d $end
$upscope $end
$scope module row_2_3 $end
$var reg 1 h a $end
$var reg 1 i b $end
$var reg 1 j c $end
$var reg 1 k cin $end
$var reg 1 l cout $end
$var reg 1 m sum $end
$var reg 1 n d $end
$upscope $end
$scope module row_3_0 $end
$var reg 1 o a $end
$var reg 1 p b $end
$var reg 1 q c $end
$var reg 1 r cout $end
$var reg 1 s sum $end
$var reg 1 t d $end
$upscope $end
$scope module row_3_1 $end
$var reg 1 u a $end
$var reg 1 v b $end
$var reg 1 w c $end
$var reg 1 x cin $end
$var reg 1 y cout $end
$var reg 1 z sum $end
$var reg 1 { d $end
$upscope $end
$scope module row_3_2 $end
$var reg 1 | a $end
$var reg 1 } b $end
$var reg 1 !" c $end
$var reg 1 "" cin $end
$var reg 1 #" cout $end
$var reg 1 $" sum $end
$var reg 1 %" d $end
$upscope $end
$scope module row_3_3 $end
$var reg 1 &" a $end
$var reg 1 '" b $end
$var reg 1 (" c $end
$var reg 1 )" cin $end
$var reg 1 *" cout $end
$var reg 1 +" sum $end
$var reg 1 ," d $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
b1010 !
b1101 "
b10000010 #
b1010 $
b1101 %
b10000010 &
b1010 '
b0000 (
b0101 )
b0010 *
b1100 +
b1110 ,
b0000 -
0.
1/
00
11
12
13
04
15
06
17
18
19
1:
0;
0<
0=
1>
0?
0@
1A
0B
0C
0D
0E
0F
1G
0H
0I
0J
0K
1L
0M
0N
1O
0P
0Q
0R
0S
0T
0U
1V
0W
0X
0Y
1Z
1[
1\
0]
1^
0_
1`
0a
0b
1c
1d
0e
1f
0g
0h
1i
1j
0k
0l
1m
1n
0o
0p
1q
0r
0s
0t
1u
1v
1w
0x
1y
0z
1{
1|
0}
1!"
1""
1#"
0$"
0%"
0&"
1'"
1("
1)"
1*"
0+"
1,"
#10000000
b1001 !
b0111 "
b00111111 #
b1001 $
b0111 %
b00111111 &
b1001 '
b1101 )
b0000 *
b1111 +
b0000 ,
b0111 -
1.
10
01
03
0:
1;
1<
1?
0A
1B
1I
1P
1R
1S
1U
1X
1Y
0[
0^
1_
0`
1a
0d
1o
1p
0q
1s
0v
0w
0y
1z
0{
0!"
0""
0#"
1$"
0("
0)"
0*"
0+"
0,"
#20000000
