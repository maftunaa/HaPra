$date
  Thu Nov 11 20:03:02 2021
$end
$version
  GHDL v0
$end
$timescale
  1 fs
$end
$scope module standard $end
$upscope $end
$scope module std_logic_1164 $end
$upscope $end
$scope module mux81 $end
$var reg 3 ! i1_81[2:0] $end
$var reg 3 " i2_81[2:0] $end
$var reg 3 # i3_81[2:0] $end
$var reg 3 $ i4_81[2:0] $end
$var reg 3 % i5_81[2:0] $end
$var reg 3 & i6_81[2:0] $end
$var reg 3 ' i7_81[2:0] $end
$var reg 3 ( i8_81[2:0] $end
$var reg 3 ) sel_81[2:0] $end
$var reg 3 * y_81[2:0] $end
$var reg 1 + not_sel $end
$var reg 3 , m1[2:0] $end
$var reg 3 - m2[2:0] $end
$var reg 2 . sel81[1:0] $end
$var reg 3 / and1[2:0] $end
$var reg 3 0 and2[2:0] $end
$var reg 3 1 out_or[2:0] $end
$scope module sel81_assignment(0) $end
$upscope $end
$scope module sel81_assignment(1) $end
$upscope $end
$scope module mux1 $end
$var reg 3 2 i1[2:0] $end
$var reg 3 3 i2[2:0] $end
$var reg 3 4 i3[2:0] $end
$var reg 3 5 i4[2:0] $end
$var reg 2 6 sel[1:0] $end
$var reg 3 7 y[2:0] $end
$var reg 2 8 not_sel[1:0] $end
$var reg 3 9 and1[2:0] $end
$var reg 3 : and2[2:0] $end
$var reg 3 ; and3[2:0] $end
$var reg 3 < and4[2:0] $end
$var reg 3 = out_or[2:0] $end
$scope module not_gate_assignment(0) $end
$scope module not_output1 $end
$var reg 1 > input1 $end
$var reg 1 ? not_result $end
$var reg 1 @ not_gate $end
$upscope $end
$upscope $end
$scope module not_gate_assignment(1) $end
$scope module not_output1 $end
$var reg 1 A input1 $end
$var reg 1 B not_result $end
$var reg 1 C not_gate $end
$upscope $end
$upscope $end
$scope module and_gate_assignment(0) $end
$scope module and_output1 $end
$var reg 1 D input1 $end
$var reg 1 E input2 $end
$var reg 1 F input3 $end
$var reg 1 G and_result $end
$var reg 1 H and_gate $end
$upscope $end
$scope module and_output2 $end
$var reg 1 I input1 $end
$var reg 1 J input2 $end
$var reg 1 K input3 $end
$var reg 1 L and_result $end
$var reg 1 M and_gate $end
$upscope $end
$scope module and_output3 $end
$var reg 1 N input1 $end
$var reg 1 O input2 $end
$var reg 1 P input3 $end
$var reg 1 Q and_result $end
$var reg 1 R and_gate $end
$upscope $end
$scope module and_output4 $end
$var reg 1 S input1 $end
$var reg 1 T input2 $end
$var reg 1 U input3 $end
$var reg 1 V and_result $end
$var reg 1 W and_gate $end
$upscope $end
$upscope $end
$scope module and_gate_assignment(1) $end
$scope module and_output1 $end
$var reg 1 X input1 $end
$var reg 1 Y input2 $end
$var reg 1 Z input3 $end
$var reg 1 [ and_result $end
$var reg 1 \ and_gate $end
$upscope $end
$scope module and_output2 $end
$var reg 1 ] input1 $end
$var reg 1 ^ input2 $end
$var reg 1 _ input3 $end
$var reg 1 ` and_result $end
$var reg 1 a and_gate $end
$upscope $end
$scope module and_output3 $end
$var reg 1 b input1 $end
$var reg 1 c input2 $end
$var reg 1 d input3 $end
$var reg 1 e and_result $end
$var reg 1 f and_gate $end
$upscope $end
$scope module and_output4 $end
$var reg 1 g input1 $end
$var reg 1 h input2 $end
$var reg 1 i input3 $end
$var reg 1 j and_result $end
$var reg 1 k and_gate $end
$upscope $end
$upscope $end
$scope module and_gate_assignment(2) $end
$scope module and_output1 $end
$var reg 1 l input1 $end
$var reg 1 m input2 $end
$var reg 1 n input3 $end
$var reg 1 o and_result $end
$var reg 1 p and_gate $end
$upscope $end
$scope module and_output2 $end
$var reg 1 q input1 $end
$var reg 1 r input2 $end
$var reg 1 s input3 $end
$var reg 1 t and_result $end
$var reg 1 u and_gate $end
$upscope $end
$scope module and_output3 $end
$var reg 1 v input1 $end
$var reg 1 w input2 $end
$var reg 1 x input3 $end
$var reg 1 y and_result $end
$var reg 1 z and_gate $end
$upscope $end
$scope module and_output4 $end
$var reg 1 { input1 $end
$var reg 1 | input2 $end
$var reg 1 } input3 $end
$var reg 1 !" and_result $end
$var reg 1 "" and_gate $end
$upscope $end
$upscope $end
$scope module or_gate_assignment(0) $end
$scope module or_output1 $end
$var reg 1 #" input1 $end
$var reg 1 $" input2 $end
$var reg 1 %" input3 $end
$var reg 1 &" input4 $end
$var reg 1 '" or_result $end
$var reg 1 (" or_gate $end
$upscope $end
$upscope $end
$scope module or_gate_assignment(1) $end
$scope module or_output1 $end
$var reg 1 )" input1 $end
$var reg 1 *" input2 $end
$var reg 1 +" input3 $end
$var reg 1 ," input4 $end
$var reg 1 -" or_result $end
$var reg 1 ." or_gate $end
$upscope $end
$upscope $end
$scope module or_gate_assignment(2) $end
$scope module or_output1 $end
$var reg 1 /" input1 $end
$var reg 1 0" input2 $end
$var reg 1 1" input3 $end
$var reg 1 2" input4 $end
$var reg 1 3" or_result $end
$var reg 1 4" or_gate $end
$upscope $end
$upscope $end
$upscope $end
$scope module mux2 $end
$var reg 3 5" i1[2:0] $end
$var reg 3 6" i2[2:0] $end
$var reg 3 7" i3[2:0] $end
$var reg 3 8" i4[2:0] $end
$var reg 2 9" sel[1:0] $end
$var reg 3 :" y[2:0] $end
$var reg 2 ;" not_sel[1:0] $end
$var reg 3 <" and1[2:0] $end
$var reg 3 =" and2[2:0] $end
$var reg 3 >" and3[2:0] $end
$var reg 3 ?" and4[2:0] $end
$var reg 3 @" out_or[2:0] $end
$scope module not_gate_assignment(0) $end
$scope module not_output1 $end
$var reg 1 A" input1 $end
$var reg 1 B" not_result $end
$var reg 1 C" not_gate $end
$upscope $end
$upscope $end
$scope module not_gate_assignment(1) $end
$scope module not_output1 $end
$var reg 1 D" input1 $end
$var reg 1 E" not_result $end
$var reg 1 F" not_gate $end
$upscope $end
$upscope $end
$scope module and_gate_assignment(0) $end
$scope module and_output1 $end
$var reg 1 G" input1 $end
$var reg 1 H" input2 $end
$var reg 1 I" input3 $end
$var reg 1 J" and_result $end
$var reg 1 K" and_gate $end
$upscope $end
$scope module and_output2 $end
$var reg 1 L" input1 $end
$var reg 1 M" input2 $end
$var reg 1 N" input3 $end
$var reg 1 O" and_result $end
$var reg 1 P" and_gate $end
$upscope $end
$scope module and_output3 $end
$var reg 1 Q" input1 $end
$var reg 1 R" input2 $end
$var reg 1 S" input3 $end
$var reg 1 T" and_result $end
$var reg 1 U" and_gate $end
$upscope $end
$scope module and_output4 $end
$var reg 1 V" input1 $end
$var reg 1 W" input2 $end
$var reg 1 X" input3 $end
$var reg 1 Y" and_result $end
$var reg 1 Z" and_gate $end
$upscope $end
$upscope $end
$scope module and_gate_assignment(1) $end
$scope module and_output1 $end
$var reg 1 [" input1 $end
$var reg 1 \" input2 $end
$var reg 1 ]" input3 $end
$var reg 1 ^" and_result $end
$var reg 1 _" and_gate $end
$upscope $end
$scope module and_output2 $end
$var reg 1 `" input1 $end
$var reg 1 a" input2 $end
$var reg 1 b" input3 $end
$var reg 1 c" and_result $end
$var reg 1 d" and_gate $end
$upscope $end
$scope module and_output3 $end
$var reg 1 e" input1 $end
$var reg 1 f" input2 $end
$var reg 1 g" input3 $end
$var reg 1 h" and_result $end
$var reg 1 i" and_gate $end
$upscope $end
$scope module and_output4 $end
$var reg 1 j" input1 $end
$var reg 1 k" input2 $end
$var reg 1 l" input3 $end
$var reg 1 m" and_result $end
$var reg 1 n" and_gate $end
$upscope $end
$upscope $end
$scope module and_gate_assignment(2) $end
$scope module and_output1 $end
$var reg 1 o" input1 $end
$var reg 1 p" input2 $end
$var reg 1 q" input3 $end
$var reg 1 r" and_result $end
$var reg 1 s" and_gate $end
$upscope $end
$scope module and_output2 $end
$var reg 1 t" input1 $end
$var reg 1 u" input2 $end
$var reg 1 v" input3 $end
$var reg 1 w" and_result $end
$var reg 1 x" and_gate $end
$upscope $end
$scope module and_output3 $end
$var reg 1 y" input1 $end
$var reg 1 z" input2 $end
$var reg 1 {" input3 $end
$var reg 1 |" and_result $end
$var reg 1 }" and_gate $end
$upscope $end
$scope module and_output4 $end
$var reg 1 !# input1 $end
$var reg 1 "# input2 $end
$var reg 1 ## input3 $end
$var reg 1 $# and_result $end
$var reg 1 %# and_gate $end
$upscope $end
$upscope $end
$scope module or_gate_assignment(0) $end
$scope module or_output1 $end
$var reg 1 &# input1 $end
$var reg 1 '# input2 $end
$var reg 1 (# input3 $end
$var reg 1 )# input4 $end
$var reg 1 *# or_result $end
$var reg 1 +# or_gate $end
$upscope $end
$upscope $end
$scope module or_gate_assignment(1) $end
$scope module or_output1 $end
$var reg 1 ,# input1 $end
$var reg 1 -# input2 $end
$var reg 1 .# input3 $end
$var reg 1 /# input4 $end
$var reg 1 0# or_result $end
$var reg 1 1# or_gate $end
$upscope $end
$upscope $end
$scope module or_gate_assignment(2) $end
$scope module or_output1 $end
$var reg 1 2# input1 $end
$var reg 1 3# input2 $end
$var reg 1 4# input3 $end
$var reg 1 5# input4 $end
$var reg 1 6# or_result $end
$var reg 1 7# or_gate $end
$upscope $end
$upscope $end
$upscope $end
$scope module not_output1 $end
$var reg 1 8# input1 $end
$var reg 1 9# not_result $end
$var reg 1 :# not_gate $end
$upscope $end
$scope module and_gate_assignment(0) $end
$scope module and_output1 $end
$upscope $end
$scope module and_output2 $end
$upscope $end
$upscope $end
$scope module and_gate_assignment(1) $end
$scope module and_output1 $end
$upscope $end
$scope module and_output2 $end
$upscope $end
$upscope $end
$scope module and_gate_assignment(2) $end
$scope module and_output1 $end
$upscope $end
$scope module and_output2 $end
$upscope $end
$upscope $end
$scope module or_gate_assignment(0) $end
$scope module or_output1 $end
$var reg 1 ;# input1 $end
$var reg 1 <# input2 $end
$var reg 1 =# or_result $end
$var reg 1 ># or_gate $end
$upscope $end
$upscope $end
$scope module or_gate_assignment(1) $end
$scope module or_output1 $end
$var reg 1 ?# input1 $end
$var reg 1 @# input2 $end
$var reg 1 A# or_result $end
$var reg 1 B# or_gate $end
$upscope $end
$upscope $end
$scope module or_gate_assignment(2) $end
$scope module or_output1 $end
$var reg 1 C# input1 $end
$var reg 1 D# input2 $end
$var reg 1 E# or_result $end
$var reg 1 F# or_gate $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
bUUU !
bUUU "
bUUU #
bUUU $
bUUU %
bUUU &
bUUU '
bUUU (
bUUU )
bUUU *
U+
bUUU ,
bUUU -
bUU .
bUUU /
bUUU 0
bUUU 1
bUUU 2
bUUU 3
bUUU 4
bUUU 5
bUU 6
bUUU 7
bUU 8
bUUU 9
bUUU :
bUUU ;
bUUU <
bUUU =
U>
U?
U@
UA
UB
UC
UD
UE
UF
UG
UH
UI
UJ
UK
UL
UM
UN
UO
UP
UQ
UR
US
UT
UU
UV
UW
UX
UY
UZ
U[
U\
U]
U^
U_
U`
Ua
Ub
Uc
Ud
Ue
Uf
Ug
Uh
Ui
Uj
Uk
Ul
Um
Un
Uo
Up
Uq
Ur
Us
Ut
Uu
Uv
Uw
Ux
Uy
Uz
U{
U|
U}
U!"
U""
U#"
U$"
U%"
U&"
U'"
U("
U)"
U*"
U+"
U,"
U-"
U."
U/"
U0"
U1"
U2"
U3"
U4"
bUUU 5"
bUUU 6"
bUUU 7"
bUUU 8"
bUU 9"
bUUU :"
bUU ;"
bUUU <"
bUUU ="
bUUU >"
bUUU ?"
bUUU @"
UA"
UB"
UC"
UD"
UE"
UF"
UG"
UH"
UI"
UJ"
UK"
UL"
UM"
UN"
UO"
UP"
UQ"
UR"
US"
UT"
UU"
UV"
UW"
UX"
UY"
UZ"
U["
U\"
U]"
U^"
U_"
U`"
Ua"
Ub"
Uc"
Ud"
Ue"
Uf"
Ug"
Uh"
Ui"
Uj"
Uk"
Ul"
Um"
Un"
Uo"
Up"
Uq"
Ur"
Us"
Ut"
Uu"
Uv"
Uw"
Ux"
Uy"
Uz"
U{"
U|"
U}"
U!#
U"#
U##
U$#
U%#
U&#
U'#
U(#
U)#
U*#
U+#
U,#
U-#
U.#
U/#
U0#
U1#
U2#
U3#
U4#
U5#
U6#
U7#
U8#
U9#
U:#
U;#
U<#
U=#
U>#
U?#
U@#
UA#
UB#
UC#
UD#
UE#
UF#
